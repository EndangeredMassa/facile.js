{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"facile.js","google":"","tagline":"simple convention-based template engine","body":"# Facile\r\n\r\nFacile is a convention-based template engine that can be executed\r\neither in the browser (using jQuery or zepto) or on the server\r\n(using cheerio). While other template systems like Mustache give the\r\ndeveloper syntax for explicit conditionals, enumerations and data \r\nbindings, Facile uses simple conventions to achieve the same goals \r\nwith less code.\r\n\r\n## Installation\r\n\r\nIf you want to use Facile with Node.js, install it using `npm`:\r\n\r\n```bash\r\nnpm install facile\r\n```\r\n\r\nTo use Facile in the browser, either copy the `facile.coffee` file\r\nor the compiled `test/public/javascripts/facile.js` file into your\r\nproject.\r\n\r\n## Usage\r\n\r\nThe facile package is a single function that accepts a `template` string\r\nand a `data` object:\r\n\r\n```javascript\r\nvar facile = require(\"facile\"), // only needed in Node.js\r\n    template = \"...\",\r\n    data = {...},\r\n    output = facile(template, data);\r\n```\r\n\r\n### Data Binding by Ids and Classes\r\n\r\nFacile will look for DOM ids and classes that match the keys in your\r\ndata object and set the DOM elements' text to the data values:\r\n\r\n```javascript\r\nvar template = '<div id=\"dog\"></div><div class=\"cat\"></div>',\r\n    data = {dog: \"woof\", cat: \"meow\"};\r\nfacile(template, data);\r\n// returns '<div id=\"dog\">woof</div><div class=\"cat\">meow</div>'\r\n```\r\n\r\n### Looping Over Collections\r\n\r\nWhen a value in the data object is an array, Facile will find the\r\ncontainer DOM element that matches the data key and render its\r\ncontents for each item in the array.\r\n\r\n```javascript\r\nvar template = '<ul id=\"users\"><li class=\"name\"></li></ul>',\r\n    data = {users: [\r\n      {name: \"Moe\"}, \r\n      {name: \"Larry\"},\r\n      {name: \"Curly\"}\r\n    ]};\r\nfacile(template, data);\r\n// returns:\r\n// <ul id=\"users\">\r\n//   <li class=\"name\">Moe</li>\r\n//   <li class=\"name\">Larry</li>\r\n//   <li class=\"name\">Curly</li>\r\n// </ul>\r\n```\r\n\r\nIf you are binding an array of data to a `<table>` element, Facile will\r\nuse the content of the table's `<tbody>` as the template for the data object.\r\nThis allows you to setup a `<thead>` without duplicating it.\r\n\r\n```javascript\r\nvar template = '<table id=\"users\">' +\r\n               '  <thead>' +\r\n               '    <tr><th>Name</th></tr>' +\r\n               '  </thead>' +\r\n               '  <tbody>' +\r\n               '    <tr><td class=\"name\"></td></tr>' +\r\n               '  </tbody>' +\r\n               '</table>',\r\n    data = {users: [\r\n      {name: \"Moe\"}, \r\n      {name: \"Larry\"},\r\n      {name: \"Curly\"}\r\n    ]};\r\nfacile(template, data);\r\n// returns:\r\n// <table id=\"users\">\r\n//   <thead>\r\n//     <tr><th>Name</th></tr>\r\n//   </thead>\r\n//   <tbody>\r\n//     <tr><td class=\"name\">Moe</td></tr>\r\n//     <tr><td class=\"name\">Larry</td></tr>\r\n//     <tr><td class=\"name\">Curly</td></tr>\r\n//   </tbody>\r\n// </table>\r\n```\r\n\r\n### Removing Elements\r\n\r\nIf the data object has a `null` value, the corresponding DOM element\r\nwill be removed.\r\n\r\n```javascript\r\nvar template = '<p>Hello!</p><p class=\"impolite\">Take a hike, guy.</p>',\r\n    data = {impolite: null};\r\nfacile(template, data);\r\n// returns \"<p>Hello!</p>\"\r\n```\r\n\r\n### Setting DOM Attributes\r\n\r\nThere are two ways to set DOM attributes on elements using Facile.\r\nFirst, if a value in the data object is an object, Facile will treat \r\nthe keys as attribute names for the matching DOM element. *NOTE:* \r\nthe `content` key is required to trigger this behavior. It is also \r\nspecial in that it updates the content of the element rather than \r\nsetting a `content` attribute.\r\n\r\n```javascript\r\nvar template = '<div id=\"dog\" />',\r\n    data = {dog: {content: 'woof', 'data-age': 3} };\r\nfacile(template, data);\r\n// returns '<div id=\"dog\" data-age=\"3\">woof</div>'\r\n```\r\n\r\nThe second way is to name a key in the data object using the convention\r\n`id-or-class@attribute`.\r\n\r\n```javascript\r\nvar template = '<div id=\"dog\" />',\r\n    data = {dog: 'woof', 'dog@data-age': 3};\r\nfacile(template, data);\r\n// returns '<div id=\"dog\" data-age=\"3\">woof</div>'\r\n```\r\n\r\n### Using Facile with Express\r\n\r\nFacile works out of the box as a render engine in the Express framework \r\nin Node.js. If you are suffixing your view files with `.facile` then you\r\nsimply need to add this line to your Express app:\r\n\r\n```javascript\r\napp.set(\"view engine\", \"facile\");\r\n```\r\n\r\nIf you would rather name your view files with a `.html` suffix, add these\r\nlines instead:\r\n\r\n```javascript\r\napp.set(\"view engine\", \"html\");\r\napp.register(\".html\", require('facile'));\r\n```\r\n\r\n## Running the Tests\r\n\r\n1. Install `node` and `npm`.\r\n2. Run `npm install` to the dependencies\r\n3. Run `npm test` to run the specs in Node.js\r\n4. Run `./coffee` to watch/compile the CoffeeScripts\r\n5. Run `node test` to run Jasmine test server\r\n6. Visit [http://localhost:5000](http://localhost:5000) to see the tests run in the browser.\r\n\r\n"}